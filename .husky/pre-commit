#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "${YELLOW}üîç Running pre-commit checks...${NC}"

# Check for debugging artifacts (skip .husky directory, logger.js, test files, and scripts)
echo "Checking for console.log and debugger statements..."
JS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js|jsx|ts|tsx|mjs)$' | grep -v "^\.husky/" | grep -v "logger\.js" | grep -v "^test-" | grep -v "^tests/" | grep -v "\.test\.js$" | grep -v "\.spec\.js$" | grep -v "^scripts/")
if [ ! -z "$JS_FILES" ]; then
  FILES_WITH_CONSOLE=$(echo "$JS_FILES" | xargs grep -l "console\.\(log\|debug\)" 2>/dev/null || true)
  FILES_WITH_DEBUGGER=$(echo "$JS_FILES" | xargs grep -l "^[^/]*debugger[;\s]" 2>/dev/null || true)
else
  FILES_WITH_CONSOLE=""
  FILES_WITH_DEBUGGER=""
fi

if [ ! -z "$FILES_WITH_CONSOLE" ]; then
  echo "${RED}‚ùå Found console.log/debug statements in:${NC}"
  echo "$FILES_WITH_CONSOLE"
  echo "${YELLOW}Please remove them before committing.${NC}"
  exit 1
fi

if [ ! -z "$FILES_WITH_DEBUGGER" ]; then
  echo "${RED}‚ùå Found debugger statements in:${NC}"
  echo "$FILES_WITH_DEBUGGER"
  echo "${YELLOW}Please remove them before committing.${NC}"
  exit 1
fi


# Check for TODO/FIXME comments
echo "Checking for TODO/FIXME comments..."
FILES_WITH_TODO=$(git diff --cached --name-only --diff-filter=ACM | xargs grep -l "TODO\|FIXME" 2>/dev/null || true)
if [ ! -z "$FILES_WITH_TODO" ]; then
  echo "${YELLOW}‚ö†Ô∏è  Warning: Found TODO/FIXME comments in:${NC}"
  echo "$FILES_WITH_TODO"
  echo "${YELLOW}Consider addressing them or creating issues.${NC}"
fi
echo "TODO/FIXME check completed"

# Check file sizes
echo "Checking file sizes..."
for file in $(git diff --cached --name-only --diff-filter=ACM); do
  if [ -f "$file" ]; then
    size=$(wc -c < "$file")
    if [ $size -gt 1048576 ]; then # 1MB
      echo "${RED}‚ùå File $file is larger than 1MB ($(($size / 1024))KB)${NC}"
      echo "${YELLOW}Consider optimizing or splitting the file.${NC}"
      exit 1
    fi
  fi
done
echo "File size check completed"

# Run lint-staged
echo "Running linters and formatters..."
npx lint-staged

if [ $? -ne 0 ]; then
  echo "${RED}‚ùå Pre-commit checks failed!${NC}"
  echo "${YELLOW}Please fix the issues and try again.${NC}"
  exit 1
fi
echo "Lint-staged check completed"

# Check for sensitive data patterns
echo "Checking for sensitive data..."
PATTERNS="password=|api_key=|apikey=|secret=|private_key=|ssh-rsa|-----BEGIN"
FILES_WITH_SENSITIVE=$(git diff --cached --name-only --diff-filter=ACM | xargs grep -E "$PATTERNS" 2>/dev/null | grep -v "^#" | grep -v "password:" | grep -v "token=" | grep -v "PATTERNS=" | head -5)

if [ ! -z "$FILES_WITH_SENSITIVE" ]; then
  echo "${RED}‚ùå Possible sensitive data found:${NC}"
  echo "$FILES_WITH_SENSITIVE"
  echo "${YELLOW}Please review and remove any sensitive information.${NC}"
  exit 1
fi
echo "Sensitive data check completed"

# Check branch protection
BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$BRANCH" = "main" ] || [ "$BRANCH" = "master" ]; then
  echo "${YELLOW}‚ö†Ô∏è  Warning: Committing directly to $BRANCH branch${NC}"
  echo "Consider creating a feature branch instead."

  # Skip interactive prompt in non-interactive environments (CI, Claude Code, etc.)
  if [ -t 0 ]; then
    read -p "Are you sure you want to continue? (y/n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo "${RED}Commit cancelled.${NC}"
      exit 1
    fi
  fi
fi

echo "${GREEN}‚úÖ All pre-commit checks passed!${NC}"